$ gcc -o minimum-c-program_exe minimum-c-program.c

$ ./minimum-c-program_exe

$ nm -S minimum-c-program
0804a018 B __bss_start
0804a018 00000001 b completed.7200
0804a010 D __data_start
0804a010 W data_start
08048320 t deregister_tm_clones
08048390 t __do_global_dtors_aux
08049f0c t __do_global_dtors_aux_fini_array_entry
0804a014 D __dso_handle
08049f14 d _DYNAMIC
0804a018 D _edata
0804a01c B _end
08048454 T _fini
08048468 00000004 R _fp_hw
080483b0 t frame_dummy
08049f08 t __frame_dummy_init_array_entry
08048558 r __FRAME_END__
0804a000 d _GLOBAL_OFFSET_TABLE_
         w __gmon_start__
08048470 r __GNU_EH_FRAME_HDR
0804828c T _init
08049f0c t __init_array_end
08049f08 t __init_array_start
0804846c 00000004 R _IO_stdin_used
         w _ITM_deregisterTMCloneTable
         w _ITM_registerTMCloneTable
08049f10 d __JCR_END__
08049f10 d __JCR_LIST__
         w _Jv_RegisterClasses
08048450 00000002 T __libc_csu_fini
080483f0 0000005d T __libc_csu_init
         U __libc_start_main@@GLIBC_2.0
080483db 0000000a T main
08048350 t register_tm_clones
080482e0 T _start
0804a018 D __TMC_END__
08048310 00000004 T __x86.get_pc_thunk.bx

$ size minimum-c-program
   text	   data	    bss	    dec	    hex	filename
   1017	    272	      4	   1293	    50d	minimum-c-program

$ ldd minimum-c-program
	linux-gate.so.1 =>  (0xb7722000)
	libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xb753d000)
	/lib/ld-linux.so.2 (0x80038000)

$ objdump -Dxls minimum-c-program

minimum-c-program:     file format elf32-i386
minimum-c-program
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080482e0

Program Header:
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x00000120 memsz 0x00000120 flags r-x
  INTERP off    0x00000154 vaddr 0x08048154 paddr 0x08048154 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x0000055c memsz 0x0000055c flags r-x
    LOAD off    0x00000f08 vaddr 0x08049f08 paddr 0x08049f08 align 2**12
         filesz 0x00000110 memsz 0x00000114 flags rw-
 DYNAMIC off    0x00000f14 vaddr 0x08049f14 paddr 0x08049f14 align 2**2
         filesz 0x000000e8 memsz 0x000000e8 flags rw-
    NOTE off    0x00000168 vaddr 0x08048168 paddr 0x08048168 align 2**2
         filesz 0x00000044 memsz 0x00000044 flags r--
EH_FRAME off    0x00000470 vaddr 0x08048470 paddr 0x08048470 align 2**2
         filesz 0x0000002c memsz 0x0000002c flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-
   RELRO off    0x00000f08 vaddr 0x08049f08 paddr 0x08049f08 align 2**0
         filesz 0x000000f8 memsz 0x000000f8 flags r--

Dynamic Section:
  NEEDED               libc.so.6
  INIT                 0x0804828c
  FINI                 0x08048454
  INIT_ARRAY           0x08049f08
  INIT_ARRAYSZ         0x00000004
  FINI_ARRAY           0x08049f0c
  FINI_ARRAYSZ         0x00000004
  GNU_HASH             0x080481ac
  STRTAB               0x0804820c
  SYMTAB               0x080481cc
  STRSZ                0x00000045
  SYMENT               0x00000010
  DEBUG                0x00000000
  PLTGOT               0x0804a000
  PLTRELSZ             0x00000008
  PLTREL               0x00000011
  JMPREL               0x08048284
  REL                  0x0804827c
  RELSZ                0x00000008
  RELENT               0x00000008
  VERNEED              0x0804825c
  VERNEEDNUM           0x00000001
  VERSYM               0x08048252

Version References:
  required from libc.so.6:
    0x0d696910 0x00 02 GLIBC_2.0

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000013  08048154  08048154  00000154  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  08048168  08048168  00000168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  08048188  08048188  00000188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     00000020  080481ac  080481ac  000001ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000040  080481cc  080481cc  000001cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00000045  0804820c  0804820c  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000008  08048252  08048252  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000020  0804825c  0804825c  0000025c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000008  0804827c  0804827c  0000027c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000008  08048284  08048284  00000284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000023  0804828c  0804828c  0000028c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000020  080482b0  080482b0  000002b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000008  080482d0  080482d0  000002d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000172  080482e0  080482e0  000002e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000014  08048454  08048454  00000454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000008  08048468  08048468  00000468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 0000002c  08048470  08048470  00000470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000000c0  0804849c  0804849c  0000049c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000004  08049f08  08049f08  00000f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000004  08049f0c  08049f0c  00000f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .jcr          00000004  08049f10  08049f10  00000f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .dynamic      000000e8  08049f14  08049f14  00000f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got          00000004  08049ffc  08049ffc  00000ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got.plt      00000010  0804a000  0804a000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000008  0804a010  0804a010  00001010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000004  0804a018  0804a018  00001018  2**0
                  ALLOC
 26 .comment      00000034  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08048154 l    d  .interp	00000000              .interp
08048168 l    d  .note.ABI-tag	00000000              .note.ABI-tag
08048188 l    d  .note.gnu.build-id	00000000              .note.gnu.build-id
080481ac l    d  .gnu.hash	00000000              .gnu.hash
080481cc l    d  .dynsym	00000000              .dynsym
0804820c l    d  .dynstr	00000000              .dynstr
08048252 l    d  .gnu.version	00000000              .gnu.version
0804825c l    d  .gnu.version_r	00000000              .gnu.version_r
0804827c l    d  .rel.dyn	00000000              .rel.dyn
08048284 l    d  .rel.plt	00000000              .rel.plt
0804828c l    d  .init	00000000              .init
080482b0 l    d  .plt	00000000              .plt
080482d0 l    d  .plt.got	00000000              .plt.got
080482e0 l    d  .text	00000000              .text
08048454 l    d  .fini	00000000              .fini
08048468 l    d  .rodata	00000000              .rodata
08048470 l    d  .eh_frame_hdr	00000000              .eh_frame_hdr
0804849c l    d  .eh_frame	00000000              .eh_frame
08049f08 l    d  .init_array	00000000              .init_array
08049f0c l    d  .fini_array	00000000              .fini_array
08049f10 l    d  .jcr	00000000              .jcr
08049f14 l    d  .dynamic	00000000              .dynamic
08049ffc l    d  .got	00000000              .got
0804a000 l    d  .got.plt	00000000              .got.plt
0804a010 l    d  .data	00000000              .data
0804a018 l    d  .bss	00000000              .bss
00000000 l    d  .comment	00000000              .comment
00000000 l    df *ABS*	00000000              crtstuff.c
08049f10 l     O .jcr	00000000              __JCR_LIST__
08048320 l     F .text	00000000              deregister_tm_clones
08048350 l     F .text	00000000              register_tm_clones
08048390 l     F .text	00000000              __do_global_dtors_aux
0804a018 l     O .bss	00000001              completed.7200
08049f0c l     O .fini_array	00000000              __do_global_dtors_aux_fini_array_entry
080483b0 l     F .text	00000000              frame_dummy
08049f08 l     O .init_array	00000000              __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000              minimum-c-program.c
00000000 l    df *ABS*	00000000              crtstuff.c
08048558 l     O .eh_frame	00000000              __FRAME_END__
08049f10 l     O .jcr	00000000              __JCR_END__
00000000 l    df *ABS*	00000000              
08049f0c l       .init_array	00000000              __init_array_end
08049f14 l     O .dynamic	00000000              _DYNAMIC
08049f08 l       .init_array	00000000              __init_array_start
08048470 l       .eh_frame_hdr	00000000              __GNU_EH_FRAME_HDR
0804a000 l     O .got.plt	00000000              _GLOBAL_OFFSET_TABLE_
08048450 g     F .text	00000002              __libc_csu_fini
00000000  w      *UND*	00000000              _ITM_deregisterTMCloneTable
08048310 g     F .text	00000004              .hidden __x86.get_pc_thunk.bx
0804a010  w      .data	00000000              data_start
0804a018 g       .data	00000000              _edata
08048454 g     F .fini	00000000              _fini
0804a010 g       .data	00000000              __data_start
00000000  w      *UND*	00000000              __gmon_start__
0804a014 g     O .data	00000000              .hidden __dso_handle
0804846c g     O .rodata	00000004              _IO_stdin_used
00000000       F *UND*	00000000              __libc_start_main@@GLIBC_2.0
080483f0 g     F .text	0000005d              __libc_csu_init
0804a01c g       .bss	00000000              _end
080482e0 g     F .text	00000000              _start
08048468 g     O .rodata	00000004              _fp_hw
0804a018 g       .bss	00000000              __bss_start
080483db g     F .text	0000000a              main
00000000  w      *UND*	00000000              _Jv_RegisterClasses
0804a018 g     O .data	00000000              .hidden __TMC_END__
00000000  w      *UND*	00000000              _ITM_registerTMCloneTable
0804828c g     F .init	00000000              _init



Disassembly of section .interp:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

Disassembly of section .note.ABI-tag:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 20                	add    %ah,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

Disassembly of section .note.gnu.build-id:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 67 da             	add    %ah,-0x26(%edi)
 804819a:	23 5d 76             	and    0x76(%ebp),%ebx
 804819d:	0f 24                	(bad)  
 804819f:	99                   	cltd   
 80481a0:	98                   	cwtl   
 80481a1:	4f                   	dec    %edi
 80481a2:	b6 5f                	mov    $0x5f,%dh
 80481a4:	ab                   	stos   %eax,%es:(%edi)
 80481a5:	58                   	pop    %eax
 80481a6:	a2 49 6f 9d ec       	mov    %al,0xec9d6f49
 80481ab:	0f                   	.byte 0xf

Disassembly of section .gnu.hash:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	03 00                	add    (%eax),%eax
 80481b2:	00 00                	add    %al,(%eax)
 80481b4:	01 00                	add    %eax,(%eax)
 80481b6:	00 00                	add    %al,(%eax)
 80481b8:	05 00 00 00 00       	add    $0x0,%eax
 80481bd:	20 00                	and    %al,(%eax)
 80481bf:	20 00                	and    %al,(%eax)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 03                	add    %al,(%ebx)
 80481c5:	00 00                	add    %al,(%eax)
 80481c7:	00                   	.byte 0x0
 80481c8:	ad                   	lods   %ds:(%esi),%eax
 80481c9:	4b                   	dec    %ebx
 80481ca:	e3 c0                	jecxz  804818c <_init-0x100>

Disassembly of section .dynsym:

080481cc <.dynsym>:
	...
 80481dc:	2c 00                	sub    $0x0,%al
	...
 80481e6:	00 00                	add    %al,(%eax)
 80481e8:	20 00                	and    %al,(%eax)
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	1a 00                	sbb    (%eax),%al
	...
 80481f6:	00 00                	add    %al,(%eax)
 80481f8:	12 00                	adc    (%eax),%al
 80481fa:	00 00                	add    %al,(%eax)
 80481fc:	0b 00                	or     (%eax),%eax
 80481fe:	00 00                	add    %al,(%eax)
 8048200:	6c                   	insb   (%dx),%es:(%edi)
 8048201:	84 04 08             	test   %al,(%eax,%ecx,1)
 8048204:	04 00                	add    $0x0,%al
 8048206:	00 00                	add    %al,(%eax)
 8048208:	11 00                	adc    %eax,(%eax)
 804820a:	10 00                	adc    %al,(%eax)

Disassembly of section .dynstr:

0804820c <.dynstr>:
 804820c:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048210:	63 2e                	arpl   %bp,(%esi)
 8048212:	73 6f                	jae    8048283 <_init-0x9>
 8048214:	2e 36 00 5f 49       	cs add %bl,%ss:0x49(%edi)
 8048219:	4f                   	dec    %edi
 804821a:	5f                   	pop    %edi
 804821b:	73 74                	jae    8048291 <_init+0x5>
 804821d:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048224:	64 
 8048225:	00 5f 5f             	add    %bl,0x5f(%edi)
 8048228:	6c                   	insb   (%dx),%es:(%edi)
 8048229:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%edx),%esp
 8048230:	72 74                	jb     80482a6 <_init+0x1a>
 8048232:	5f                   	pop    %edi
 8048233:	6d                   	insl   (%dx),%es:(%edi)
 8048234:	61                   	popa   
 8048235:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 804823c:	6f                   	outsl  %ds:(%esi),(%dx)
 804823d:	6e                   	outsb  %ds:(%esi),(%dx)
 804823e:	5f                   	pop    %edi
 804823f:	73 74                	jae    80482b5 <_init+0x29>
 8048241:	61                   	popa   
 8048242:	72 74                	jb     80482b8 <_init+0x2c>
 8048244:	5f                   	pop    %edi
 8048245:	5f                   	pop    %edi
 8048246:	00 47 4c             	add    %al,0x4c(%edi)
 8048249:	49                   	dec    %ecx
 804824a:	42                   	inc    %edx
 804824b:	43                   	inc    %ebx
 804824c:	5f                   	pop    %edi
 804824d:	32 2e                	xor    (%esi),%ch
 804824f:	30 00                	xor    %al,(%eax)

Disassembly of section .gnu.version:

08048252 <.gnu.version>:
 8048252:	00 00                	add    %al,(%eax)
 8048254:	00 00                	add    %al,(%eax)
 8048256:	02 00                	add    (%eax),%al
 8048258:	01 00                	add    %eax,(%eax)

Disassembly of section .gnu.version_r:

0804825c <.gnu.version_r>:
 804825c:	01 00                	add    %eax,(%eax)
 804825e:	01 00                	add    %eax,(%eax)
 8048260:	01 00                	add    %eax,(%eax)
 8048262:	00 00                	add    %al,(%eax)
 8048264:	10 00                	adc    %al,(%eax)
 8048266:	00 00                	add    %al,(%eax)
 8048268:	00 00                	add    %al,(%eax)
 804826a:	00 00                	add    %al,(%eax)
 804826c:	10 69 69             	adc    %ch,0x69(%ecx)
 804826f:	0d 00 00 02 00       	or     $0x20000,%eax
 8048274:	3b 00                	cmp    (%eax),%eax
 8048276:	00 00                	add    %al,(%eax)
 8048278:	00 00                	add    %al,(%eax)
	...

Disassembly of section .rel.dyn:

0804827c <.rel.dyn>:
 804827c:	fc                   	cld    
 804827d:	9f                   	lahf   
 804827e:	04 08                	add    $0x8,%al
 8048280:	06                   	push   %es
 8048281:	01 00                	add    %eax,(%eax)
	...

Disassembly of section .rel.plt:

08048284 <.rel.plt>:
 8048284:	0c a0                	or     $0xa0,%al
 8048286:	04 08                	add    $0x8,%al
 8048288:	07                   	pop    %es
 8048289:	02 00                	add    (%eax),%al
	...

Disassembly of section .init:

0804828c <_init>:
_init():
 804828c:	53                   	push   %ebx
 804828d:	83 ec 08             	sub    $0x8,%esp
 8048290:	e8 7b 00 00 00       	call   8048310 <__x86.get_pc_thunk.bx>
 8048295:	81 c3 6b 1d 00 00    	add    $0x1d6b,%ebx
 804829b:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482a1:	85 c0                	test   %eax,%eax
 80482a3:	74 05                	je     80482aa <_init+0x1e>
 80482a5:	e8 26 00 00 00       	call   80482d0 <__libc_start_main@plt+0x10>
 80482aa:	83 c4 08             	add    $0x8,%esp
 80482ad:	5b                   	pop    %ebx
 80482ae:	c3                   	ret    

Disassembly of section .plt:

080482b0 <__libc_start_main@plt-0x10>:
 80482b0:	ff 35 04 a0 04 08    	pushl  0x804a004
 80482b6:	ff 25 08 a0 04 08    	jmp    *0x804a008
 80482bc:	00 00                	add    %al,(%eax)
	...

080482c0 <__libc_start_main@plt>:
 80482c0:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80482c6:	68 00 00 00 00       	push   $0x0
 80482cb:	e9 e0 ff ff ff       	jmp    80482b0 <_init+0x24>

Disassembly of section .plt.got:

080482d0 <.plt.got>:
 80482d0:	ff 25 fc 9f 04 08    	jmp    *0x8049ffc
 80482d6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

080482e0 <_start>:
_start():
 80482e0:	31 ed                	xor    %ebp,%ebp
 80482e2:	5e                   	pop    %esi
 80482e3:	89 e1                	mov    %esp,%ecx
 80482e5:	83 e4 f0             	and    $0xfffffff0,%esp
 80482e8:	50                   	push   %eax
 80482e9:	54                   	push   %esp
 80482ea:	52                   	push   %edx
 80482eb:	68 50 84 04 08       	push   $0x8048450
 80482f0:	68 f0 83 04 08       	push   $0x80483f0
 80482f5:	51                   	push   %ecx
 80482f6:	56                   	push   %esi
 80482f7:	68 db 83 04 08       	push   $0x80483db
 80482fc:	e8 bf ff ff ff       	call   80482c0 <__libc_start_main@plt>
 8048301:	f4                   	hlt    
 8048302:	66 90                	xchg   %ax,%ax
 8048304:	66 90                	xchg   %ax,%ax
 8048306:	66 90                	xchg   %ax,%ax
 8048308:	66 90                	xchg   %ax,%ax
 804830a:	66 90                	xchg   %ax,%ax
 804830c:	66 90                	xchg   %ax,%ax
 804830e:	66 90                	xchg   %ax,%ax

08048310 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
 8048310:	8b 1c 24             	mov    (%esp),%ebx
 8048313:	c3                   	ret    
 8048314:	66 90                	xchg   %ax,%ax
 8048316:	66 90                	xchg   %ax,%ax
 8048318:	66 90                	xchg   %ax,%ax
 804831a:	66 90                	xchg   %ax,%ax
 804831c:	66 90                	xchg   %ax,%ax
 804831e:	66 90                	xchg   %ax,%ax

08048320 <deregister_tm_clones>:
deregister_tm_clones():
 8048320:	b8 1b a0 04 08       	mov    $0x804a01b,%eax
 8048325:	2d 18 a0 04 08       	sub    $0x804a018,%eax
 804832a:	83 f8 06             	cmp    $0x6,%eax
 804832d:	76 1a                	jbe    8048349 <deregister_tm_clones+0x29>
 804832f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048334:	85 c0                	test   %eax,%eax
 8048336:	74 11                	je     8048349 <deregister_tm_clones+0x29>
 8048338:	55                   	push   %ebp
 8048339:	89 e5                	mov    %esp,%ebp
 804833b:	83 ec 14             	sub    $0x14,%esp
 804833e:	68 18 a0 04 08       	push   $0x804a018
 8048343:	ff d0                	call   *%eax
 8048345:	83 c4 10             	add    $0x10,%esp
 8048348:	c9                   	leave  
 8048349:	f3 c3                	repz ret 
 804834b:	90                   	nop
 804834c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08048350 <register_tm_clones>:
register_tm_clones():
 8048350:	b8 18 a0 04 08       	mov    $0x804a018,%eax
 8048355:	2d 18 a0 04 08       	sub    $0x804a018,%eax
 804835a:	c1 f8 02             	sar    $0x2,%eax
 804835d:	89 c2                	mov    %eax,%edx
 804835f:	c1 ea 1f             	shr    $0x1f,%edx
 8048362:	01 d0                	add    %edx,%eax
 8048364:	d1 f8                	sar    %eax
 8048366:	74 1b                	je     8048383 <register_tm_clones+0x33>
 8048368:	ba 00 00 00 00       	mov    $0x0,%edx
 804836d:	85 d2                	test   %edx,%edx
 804836f:	74 12                	je     8048383 <register_tm_clones+0x33>
 8048371:	55                   	push   %ebp
 8048372:	89 e5                	mov    %esp,%ebp
 8048374:	83 ec 10             	sub    $0x10,%esp
 8048377:	50                   	push   %eax
 8048378:	68 18 a0 04 08       	push   $0x804a018
 804837d:	ff d2                	call   *%edx
 804837f:	83 c4 10             	add    $0x10,%esp
 8048382:	c9                   	leave  
 8048383:	f3 c3                	repz ret 
 8048385:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048389:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048390 <__do_global_dtors_aux>:
__do_global_dtors_aux():
 8048390:	80 3d 18 a0 04 08 00 	cmpb   $0x0,0x804a018
 8048397:	75 13                	jne    80483ac <__do_global_dtors_aux+0x1c>
 8048399:	55                   	push   %ebp
 804839a:	89 e5                	mov    %esp,%ebp
 804839c:	83 ec 08             	sub    $0x8,%esp
 804839f:	e8 7c ff ff ff       	call   8048320 <deregister_tm_clones>
 80483a4:	c6 05 18 a0 04 08 01 	movb   $0x1,0x804a018
 80483ab:	c9                   	leave  
 80483ac:	f3 c3                	repz ret 
 80483ae:	66 90                	xchg   %ax,%ax

080483b0 <frame_dummy>:
frame_dummy():
 80483b0:	b8 10 9f 04 08       	mov    $0x8049f10,%eax
 80483b5:	8b 10                	mov    (%eax),%edx
 80483b7:	85 d2                	test   %edx,%edx
 80483b9:	75 05                	jne    80483c0 <frame_dummy+0x10>
 80483bb:	eb 93                	jmp    8048350 <register_tm_clones>
 80483bd:	8d 76 00             	lea    0x0(%esi),%esi
 80483c0:	ba 00 00 00 00       	mov    $0x0,%edx
 80483c5:	85 d2                	test   %edx,%edx
 80483c7:	74 f2                	je     80483bb <frame_dummy+0xb>
 80483c9:	55                   	push   %ebp
 80483ca:	89 e5                	mov    %esp,%ebp
 80483cc:	83 ec 14             	sub    $0x14,%esp
 80483cf:	50                   	push   %eax
 80483d0:	ff d2                	call   *%edx
 80483d2:	83 c4 10             	add    $0x10,%esp
 80483d5:	c9                   	leave  
 80483d6:	e9 75 ff ff ff       	jmp    8048350 <register_tm_clones>

080483db <main>:
main():
 80483db:	55                   	push   %ebp
 80483dc:	89 e5                	mov    %esp,%ebp
 80483de:	b8 00 00 00 00       	mov    $0x0,%eax
 80483e3:	5d                   	pop    %ebp
 80483e4:	c3                   	ret    
 80483e5:	66 90                	xchg   %ax,%ax
 80483e7:	66 90                	xchg   %ax,%ax
 80483e9:	66 90                	xchg   %ax,%ax
 80483eb:	66 90                	xchg   %ax,%ax
 80483ed:	66 90                	xchg   %ax,%ax
 80483ef:	90                   	nop

080483f0 <__libc_csu_init>:
__libc_csu_init():
 80483f0:	55                   	push   %ebp
 80483f1:	57                   	push   %edi
 80483f2:	56                   	push   %esi
 80483f3:	53                   	push   %ebx
 80483f4:	e8 17 ff ff ff       	call   8048310 <__x86.get_pc_thunk.bx>
 80483f9:	81 c3 07 1c 00 00    	add    $0x1c07,%ebx
 80483ff:	83 ec 0c             	sub    $0xc,%esp
 8048402:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8048406:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804840c:	e8 7b fe ff ff       	call   804828c <_init>
 8048411:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048417:	29 c6                	sub    %eax,%esi
 8048419:	c1 fe 02             	sar    $0x2,%esi
 804841c:	85 f6                	test   %esi,%esi
 804841e:	74 25                	je     8048445 <__libc_csu_init+0x55>
 8048420:	31 ff                	xor    %edi,%edi
 8048422:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048428:	83 ec 04             	sub    $0x4,%esp
 804842b:	ff 74 24 2c          	pushl  0x2c(%esp)
 804842f:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048433:	55                   	push   %ebp
 8048434:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 804843b:	83 c7 01             	add    $0x1,%edi
 804843e:	83 c4 10             	add    $0x10,%esp
 8048441:	39 f7                	cmp    %esi,%edi
 8048443:	75 e3                	jne    8048428 <__libc_csu_init+0x38>
 8048445:	83 c4 0c             	add    $0xc,%esp
 8048448:	5b                   	pop    %ebx
 8048449:	5e                   	pop    %esi
 804844a:	5f                   	pop    %edi
 804844b:	5d                   	pop    %ebp
 804844c:	c3                   	ret    
 804844d:	8d 76 00             	lea    0x0(%esi),%esi

08048450 <__libc_csu_fini>:
__libc_csu_fini():
 8048450:	f3 c3                	repz ret 

Disassembly of section .fini:

08048454 <_fini>:
_fini():
 8048454:	53                   	push   %ebx
 8048455:	83 ec 08             	sub    $0x8,%esp
 8048458:	e8 b3 fe ff ff       	call   8048310 <__x86.get_pc_thunk.bx>
 804845d:	81 c3 a3 1b 00 00    	add    $0x1ba3,%ebx
 8048463:	83 c4 08             	add    $0x8,%esp
 8048466:	5b                   	pop    %ebx
 8048467:	c3                   	ret    

Disassembly of section .rodata:

08048468 <_fp_hw>:
 8048468:	03 00                	add    (%eax),%eax
	...

0804846c <_IO_stdin_used>:
 804846c:	01 00                	add    %eax,(%eax)
 804846e:	02 00                	add    (%eax),%al

Disassembly of section .eh_frame_hdr:

08048470 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
 8048470:	01 1b                	add    %ebx,(%ebx)
 8048472:	03 3b                	add    (%ebx),%edi
 8048474:	28 00                	sub    %al,(%eax)
 8048476:	00 00                	add    %al,(%eax)
 8048478:	04 00                	add    $0x0,%al
 804847a:	00 00                	add    %al,(%eax)
 804847c:	40                   	inc    %eax
 804847d:	fe                   	(bad)  
 804847e:	ff                   	(bad)  
 804847f:	ff 44 00 00          	incl   0x0(%eax,%eax,1)
 8048483:	00 6b ff             	add    %ch,-0x1(%ebx)
 8048486:	ff                   	(bad)  
 8048487:	ff 68 00             	ljmp   *0x0(%eax)
 804848a:	00 00                	add    %al,(%eax)
 804848c:	80 ff ff             	cmp    $0xff,%bh
 804848f:	ff 88 00 00 00 e0    	decl   -0x20000000(%eax)
 8048495:	ff                   	(bad)  
 8048496:	ff                   	(bad)  
 8048497:	ff d4                	call   *%esp
 8048499:	00 00                	add    %al,(%eax)
	...

Disassembly of section .eh_frame:

0804849c <__FRAME_END__-0xbc>:
 804849c:	14 00                	adc    $0x0,%al
 804849e:	00 00                	add    %al,(%eax)
 80484a0:	00 00                	add    %al,(%eax)
 80484a2:	00 00                	add    %al,(%eax)
 80484a4:	01 7a 52             	add    %edi,0x52(%edx)
 80484a7:	00 01                	add    %al,(%ecx)
 80484a9:	7c 08                	jl     80484b3 <__GNU_EH_FRAME_HDR+0x43>
 80484ab:	01 1b                	add    %ebx,(%ebx)
 80484ad:	0c 04                	or     $0x4,%al
 80484af:	04 88                	add    $0x88,%al
 80484b1:	01 00                	add    %eax,(%eax)
 80484b3:	00 20                	add    %ah,(%eax)
 80484b5:	00 00                	add    %al,(%eax)
 80484b7:	00 1c 00             	add    %bl,(%eax,%eax,1)
 80484ba:	00 00                	add    %al,(%eax)
 80484bc:	f4                   	hlt    
 80484bd:	fd                   	std    
 80484be:	ff                   	(bad)  
 80484bf:	ff 20                	jmp    *(%eax)
 80484c1:	00 00                	add    %al,(%eax)
 80484c3:	00 00                	add    %al,(%eax)
 80484c5:	0e                   	push   %cs
 80484c6:	08 46 0e             	or     %al,0xe(%esi)
 80484c9:	0c 4a                	or     $0x4a,%al
 80484cb:	0f 0b                	ud2    
 80484cd:	74 04                	je     80484d3 <__GNU_EH_FRAME_HDR+0x63>
 80484cf:	78 00                	js     80484d1 <__GNU_EH_FRAME_HDR+0x61>
 80484d1:	3f                   	aas    
 80484d2:	1a 3b                	sbb    (%ebx),%bh
 80484d4:	2a 32                	sub    (%edx),%dh
 80484d6:	24 22                	and    $0x22,%al
 80484d8:	1c 00                	sbb    $0x0,%al
 80484da:	00 00                	add    %al,(%eax)
 80484dc:	40                   	inc    %eax
 80484dd:	00 00                	add    %al,(%eax)
 80484df:	00 fb                	add    %bh,%bl
 80484e1:	fe                   	(bad)  
 80484e2:	ff                   	(bad)  
 80484e3:	ff 0a                	decl   (%edx)
 80484e5:	00 00                	add    %al,(%eax)
 80484e7:	00 00                	add    %al,(%eax)
 80484e9:	41                   	inc    %ecx
 80484ea:	0e                   	push   %cs
 80484eb:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 80484f1:	46                   	inc    %esi
 80484f2:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
 80484f5:	04 00                	add    $0x0,%al
 80484f7:	00 48 00             	add    %cl,0x0(%eax)
 80484fa:	00 00                	add    %al,(%eax)
 80484fc:	60                   	pusha  
 80484fd:	00 00                	add    %al,(%eax)
 80484ff:	00 f0                	add    %dh,%al
 8048501:	fe                   	(bad)  
 8048502:	ff                   	(bad)  
 8048503:	ff 5d 00             	lcall  *0x0(%ebp)
 8048506:	00 00                	add    %al,(%eax)
 8048508:	00 41 0e             	add    %al,0xe(%ecx)
 804850b:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 8048511:	87 03                	xchg   %eax,(%ebx)
 8048513:	41                   	inc    %ecx
 8048514:	0e                   	push   %cs
 8048515:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 804851b:	83 05 4e 0e 20 69 0e 	addl   $0xe,0x69200e4e
 8048522:	24 44                	and    $0x44,%al
 8048524:	0e                   	push   %cs
 8048525:	28 44 0e 2c          	sub    %al,0x2c(%esi,%ecx,1)
 8048529:	41                   	inc    %ecx
 804852a:	0e                   	push   %cs
 804852b:	30 4d 0e             	xor    %cl,0xe(%ebp)
 804852e:	20 47 0e             	and    %al,0xe(%edi)
 8048531:	14 41                	adc    $0x41,%al
 8048533:	c3                   	ret    
 8048534:	0e                   	push   %cs
 8048535:	10 41 c6             	adc    %al,-0x3a(%ecx)
 8048538:	0e                   	push   %cs
 8048539:	0c 41                	or     $0x41,%al
 804853b:	c7                   	(bad)  
 804853c:	0e                   	push   %cs
 804853d:	08 41 c5             	or     %al,-0x3b(%ecx)
 8048540:	0e                   	push   %cs
 8048541:	04 00                	add    $0x0,%al
 8048543:	00 10                	add    %dl,(%eax)
 8048545:	00 00                	add    %al,(%eax)
 8048547:	00 ac 00 00 00 04 ff 	add    %ch,-0xfc0000(%eax,%eax,1)
 804854e:	ff                   	(bad)  
 804854f:	ff 02                	incl   (%edx)
 8048551:	00 00                	add    %al,(%eax)
 8048553:	00 00                	add    %al,(%eax)
 8048555:	00 00                	add    %al,(%eax)
	...

08048558 <__FRAME_END__>:
 8048558:	00 00                	add    %al,(%eax)
	...

Disassembly of section .init_array:

08049f08 <__frame_dummy_init_array_entry>:
__init_array_start():
 8049f08:	b0 83                	mov    $0x83,%al
 8049f0a:	04 08                	add    $0x8,%al

Disassembly of section .fini_array:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	90                   	nop
 8049f0d:	83                   	.byte 0x83
 8049f0e:	04 08                	add    $0x8,%al

Disassembly of section .jcr:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

Disassembly of section .dynamic:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	8c 82 04 08 0d 00    	mov    %es,0xd0804(%edx)
 8049f26:	00 00                	add    %al,(%eax)
 8049f28:	54                   	push   %esp
 8049f29:	84 04 08             	test   %al,(%eax,%ecx,1)
 8049f2c:	19 00                	sbb    %eax,(%eax)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	0c 82                	or     $0x82,%al
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 cc                	add    %cl,%ah
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	45                   	inc    %ebp
 8049f69:	00 00                	add    %al,(%eax)
 8049f6b:	00 0b                	add    %cl,(%ebx)
 8049f6d:	00 00                	add    %al,(%eax)
 8049f6f:	00 10                	add    %dl,(%eax)
 8049f71:	00 00                	add    %al,(%eax)
 8049f73:	00 15 00 00 00 00    	add    %dl,0x0
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	08 00                	or     %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 84 82 04 08 11 00 	add    %al,0x110804(%edx,%eax,4)
 8049f9e:	00 00                	add    %al,(%eax)
 8049fa0:	7c 82                	jl     8049f24 <_DYNAMIC+0x10>
 8049fa2:	04 08                	add    $0x8,%al
 8049fa4:	12 00                	adc    (%eax),%al
 8049fa6:	00 00                	add    %al,(%eax)
 8049fa8:	08 00                	or     %al,(%eax)
 8049faa:	00 00                	add    %al,(%eax)
 8049fac:	13 00                	adc    (%eax),%eax
 8049fae:	00 00                	add    %al,(%eax)
 8049fb0:	08 00                	or     %al,(%eax)
 8049fb2:	00 00                	add    %al,(%eax)
 8049fb4:	fe                   	(bad)  
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f 5c             	ljmp   *0x5c(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f 52             	ljmp   *0x52(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

Disassembly of section .got:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
	...

Disassembly of section .got.plt:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	c6                   	.byte 0xc6
 804a00d:	82                   	(bad)  
 804a00e:	04 08                	add    $0x8,%al

Disassembly of section .data:

0804a010 <__data_start>:
data_start():
 804a010:	00 00                	add    %al,(%eax)
	...

0804a014 <__dso_handle>:
 804a014:	00 00                	add    %al,(%eax)
	...

Disassembly of section .bss:

0804a018 <__bss_start>:
__bss_start():
 804a018:	00 00                	add    %al,(%eax)
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x8048214>
   a:	74 75                	je     81 <_init-0x804820b>
   c:	20 35 2e 34 2e 30    	and    %dh,0x302e342e
  12:	2d 36 75 62 75       	sub    $0x75627536,%eax
  17:	6e                   	outsb  %ds:(%esi),(%dx)
  18:	74 75                	je     8f <_init-0x80481fd>
  1a:	31 7e 31             	xor    %edi,0x31(%esi)
  1d:	36 2e 30 34 2e       	ss xor %dh,%cs:(%esi,%ebp,1)
  22:	34 29                	xor    $0x29,%al
  24:	20 35 2e 34 2e 30    	and    %dh,0x302e342e
  2a:	20 32                	and    %dh,(%edx)
  2c:	30 31                	xor    %dh,(%ecx)
  2e:	36 30 36             	xor    %dh,%ss:(%esi)
  31:	30 39                	xor    %bh,(%ecx)
	...


$ readelf -a minimum-c-program
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x80482e0
  Start of program headers:          52 (bytes into file)
  Start of section headers:          6080 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         9
  Size of section headers:           40 (bytes)
  Number of section headers:         31
  Section header string table index: 28

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1
  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4
  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4
  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4
  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000040 10   A  6   1  4
  [ 6] .dynstr           STRTAB          0804820c 00020c 000045 00   A  0   0  1
  [ 7] .gnu.version      VERSYM          08048252 000252 000008 02   A  5   0  2
  [ 8] .gnu.version_r    VERNEED         0804825c 00025c 000020 00   A  6   1  4
  [ 9] .rel.dyn          REL             0804827c 00027c 000008 08   A  5   0  4
  [10] .rel.plt          REL             08048284 000284 000008 08  AI  5  24  4
  [11] .init             PROGBITS        0804828c 00028c 000023 00  AX  0   0  4
  [12] .plt              PROGBITS        080482b0 0002b0 000020 04  AX  0   0 16
  [13] .plt.got          PROGBITS        080482d0 0002d0 000008 00  AX  0   0  8
  [14] .text             PROGBITS        080482e0 0002e0 000172 00  AX  0   0 16
  [15] .fini             PROGBITS        08048454 000454 000014 00  AX  0   0  4
  [16] .rodata           PROGBITS        08048468 000468 000008 00   A  0   0  4
  [17] .eh_frame_hdr     PROGBITS        08048470 000470 00002c 00   A  0   0  4
  [18] .eh_frame         PROGBITS        0804849c 00049c 0000c0 00   A  0   0  4
  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4
  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4
  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4
  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4
  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4
  [24] .got.plt          PROGBITS        0804a000 001000 000010 04  WA  0   0  4
  [25] .data             PROGBITS        0804a010 001010 000008 00  WA  0   0  4
  [26] .bss              NOBITS          0804a018 001018 000004 00  WA  0   0  1
  [27] .comment          PROGBITS        00000000 001018 000034 01  MS  0   0  1
  [28] .shstrtab         STRTAB          00000000 0016b5 00010a 00      0   0  1
  [29] .symtab           SYMTAB          00000000 00104c 000440 10     30  47  4
  [30] .strtab           STRTAB          00000000 00148c 000229 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

There are no section groups in this file.

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4
  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1
      [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x0055c 0x0055c R E 0x1000
  LOAD           0x000f08 0x08049f08 0x08049f08 0x00110 0x00114 RW  0x1000
  DYNAMIC        0x000f14 0x08049f14 0x08049f14 0x000e8 0x000e8 RW  0x4
  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4
  GNU_EH_FRAME   0x000470 0x08048470 0x08048470 0x0002c 0x0002c R   0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10
  GNU_RELRO      0x000f08 0x08049f08 0x08049f08 0x000f8 0x000f8 R   0x1

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame 
   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss 
   04     .dynamic 
   05     .note.ABI-tag .note.gnu.build-id 
   06     .eh_frame_hdr 
   07     
   08     .init_array .fini_array .jcr .dynamic .got 

Dynamic section at offset 0xf14 contains 24 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000c (INIT)                       0x804828c
 0x0000000d (FINI)                       0x8048454
 0x00000019 (INIT_ARRAY)                 0x8049f08
 0x0000001b (INIT_ARRAYSZ)               4 (bytes)
 0x0000001a (FINI_ARRAY)                 0x8049f0c
 0x0000001c (FINI_ARRAYSZ)               4 (bytes)
 0x6ffffef5 (GNU_HASH)                   0x80481ac
 0x00000005 (STRTAB)                     0x804820c
 0x00000006 (SYMTAB)                     0x80481cc
 0x0000000a (STRSZ)                      69 (bytes)
 0x0000000b (SYMENT)                     16 (bytes)
 0x00000015 (DEBUG)                      0x0
 0x00000003 (PLTGOT)                     0x804a000
 0x00000002 (PLTRELSZ)                   8 (bytes)
 0x00000014 (PLTREL)                     REL
 0x00000017 (JMPREL)                     0x8048284
 0x00000011 (REL)                        0x804827c
 0x00000012 (RELSZ)                      8 (bytes)
 0x00000013 (RELENT)                     8 (bytes)
 0x6ffffffe (VERNEED)                    0x804825c
 0x6fffffff (VERNEEDNUM)                 1
 0x6ffffff0 (VERSYM)                     0x8048252
 0x00000000 (NULL)                       0x0

Relocation section '.rel.dyn' at offset 0x27c contains 1 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
08049ffc  00000106 R_386_GLOB_DAT    00000000   __gmon_start__

Relocation section '.rel.plt' at offset 0x284 contains 1 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
0804a00c  00000207 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0

The decoding of unwind sections for machine type Intel 80386 is not currently supported.

Symbol table '.dynsym' contains 4 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.0 (2)
     3: 0804846c     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used

Symbol table '.symtab' contains 68 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 08048154     0 SECTION LOCAL  DEFAULT    1 
     2: 08048168     0 SECTION LOCAL  DEFAULT    2 
     3: 08048188     0 SECTION LOCAL  DEFAULT    3 
     4: 080481ac     0 SECTION LOCAL  DEFAULT    4 
     5: 080481cc     0 SECTION LOCAL  DEFAULT    5 
     6: 0804820c     0 SECTION LOCAL  DEFAULT    6 
     7: 08048252     0 SECTION LOCAL  DEFAULT    7 
     8: 0804825c     0 SECTION LOCAL  DEFAULT    8 
     9: 0804827c     0 SECTION LOCAL  DEFAULT    9 
    10: 08048284     0 SECTION LOCAL  DEFAULT   10 
    11: 0804828c     0 SECTION LOCAL  DEFAULT   11 
    12: 080482b0     0 SECTION LOCAL  DEFAULT   12 
    13: 080482d0     0 SECTION LOCAL  DEFAULT   13 
    14: 080482e0     0 SECTION LOCAL  DEFAULT   14 
    15: 08048454     0 SECTION LOCAL  DEFAULT   15 
    16: 08048468     0 SECTION LOCAL  DEFAULT   16 
    17: 08048470     0 SECTION LOCAL  DEFAULT   17 
    18: 0804849c     0 SECTION LOCAL  DEFAULT   18 
    19: 08049f08     0 SECTION LOCAL  DEFAULT   19 
    20: 08049f0c     0 SECTION LOCAL  DEFAULT   20 
    21: 08049f10     0 SECTION LOCAL  DEFAULT   21 
    22: 08049f14     0 SECTION LOCAL  DEFAULT   22 
    23: 08049ffc     0 SECTION LOCAL  DEFAULT   23 
    24: 0804a000     0 SECTION LOCAL  DEFAULT   24 
    25: 0804a010     0 SECTION LOCAL  DEFAULT   25 
    26: 0804a018     0 SECTION LOCAL  DEFAULT   26 
    27: 00000000     0 SECTION LOCAL  DEFAULT   27 
    28: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c
    29: 08049f10     0 OBJECT  LOCAL  DEFAULT   21 __JCR_LIST__
    30: 08048320     0 FUNC    LOCAL  DEFAULT   14 deregister_tm_clones
    31: 08048350     0 FUNC    LOCAL  DEFAULT   14 register_tm_clones
    32: 08048390     0 FUNC    LOCAL  DEFAULT   14 __do_global_dtors_aux
    33: 0804a018     1 OBJECT  LOCAL  DEFAULT   26 completed.7200
    34: 08049f0c     0 OBJECT  LOCAL  DEFAULT   20 __do_global_dtors_aux_fin
    35: 080483b0     0 FUNC    LOCAL  DEFAULT   14 frame_dummy
    36: 08049f08     0 OBJECT  LOCAL  DEFAULT   19 __frame_dummy_init_array_
    37: 00000000     0 FILE    LOCAL  DEFAULT  ABS minimum-c-program.c
    38: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c
    39: 08048558     0 OBJECT  LOCAL  DEFAULT   18 __FRAME_END__
    40: 08049f10     0 OBJECT  LOCAL  DEFAULT   21 __JCR_END__
    41: 00000000     0 FILE    LOCAL  DEFAULT  ABS 
    42: 08049f0c     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_end
    43: 08049f14     0 OBJECT  LOCAL  DEFAULT   22 _DYNAMIC
    44: 08049f08     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_start
    45: 08048470     0 NOTYPE  LOCAL  DEFAULT   17 __GNU_EH_FRAME_HDR
    46: 0804a000     0 OBJECT  LOCAL  DEFAULT   24 _GLOBAL_OFFSET_TABLE_
    47: 08048450     2 FUNC    GLOBAL DEFAULT   14 __libc_csu_fini
    48: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab
    49: 08048310     4 FUNC    GLOBAL HIDDEN    14 __x86.get_pc_thunk.bx
    50: 0804a010     0 NOTYPE  WEAK   DEFAULT   25 data_start
    51: 0804a018     0 NOTYPE  GLOBAL DEFAULT   25 _edata
    52: 08048454     0 FUNC    GLOBAL DEFAULT   15 _fini
    53: 0804a010     0 NOTYPE  GLOBAL DEFAULT   25 __data_start
    54: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
    55: 0804a014     0 OBJECT  GLOBAL HIDDEN    25 __dso_handle
    56: 0804846c     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used
    57: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_
    58: 080483f0    93 FUNC    GLOBAL DEFAULT   14 __libc_csu_init
    59: 0804a01c     0 NOTYPE  GLOBAL DEFAULT   26 _end
    60: 080482e0     0 FUNC    GLOBAL DEFAULT   14 _start
    61: 08048468     4 OBJECT  GLOBAL DEFAULT   16 _fp_hw
    62: 0804a018     0 NOTYPE  GLOBAL DEFAULT   26 __bss_start
    63: 080483db    10 FUNC    GLOBAL DEFAULT   14 main
    64: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses
    65: 0804a018     0 OBJECT  GLOBAL HIDDEN    25 __TMC_END__
    66: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable
    67: 0804828c     0 FUNC    GLOBAL DEFAULT   11 _init

Histogram for `.gnu.hash' bucket list length (total of 2 buckets):
 Length  Number     % of total  Coverage
      0  1          ( 50.0%)
      1  1          ( 50.0%)    100.0%

Version symbols section '.gnu.version' contains 4 entries:
 Addr: 0000000008048252  Offset: 0x000252  Link: 5 (.dynsym)
  000:   0 (*local*)       0 (*local*)       2 (GLIBC_2.0)     1 (*global*)   

Version needs section '.gnu.version_r' contains 1 entries:
 Addr: 0x000000000804825c  Offset: 0x00025c  Link: 6 (.dynstr)
  000000: Version: 1  File: libc.so.6  Cnt: 1
  0x0010:   Name: GLIBC_2.0  Flags: none  Version: 2

Displaying notes found at file offset 0x00000168 with length 0x00000020:
  Owner                 Data size	Description
  GNU                  0x00000010	NT_GNU_ABI_TAG (ABI version tag)
    OS: Linux, ABI: 2.6.32

Displaying notes found at file offset 0x00000188 with length 0x00000024:
  Owner                 Data size	Description
  GNU                  0x00000014	NT_GNU_BUILD_ID (unique build ID bitstring)
    Build ID: 67da235d760f2499984fb65fab58a2496f9dec0f

$ ltrace ./minimum-c-program_exe 
__libc_start_main(0x80483db, 1, 0xbfadd174, 0x80483f0 <no return ...>
+++ exited (status 0) +++

$ strace ./minimum-c-program_exe 
execve("./minimum-c-program_exe", ["./minimum-c-program_exe"], [/* 69 vars */]) = 0
brk(NULL)                               = 0x96ce000
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb770c000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=170138, ...}) = 0
mmap2(NULL, 170138, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb76e2000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/i386-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\1\1\1\3\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\320\207\1\0004\0\0\0"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=1786484, ...}) = 0
mmap2(NULL, 1792540, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb752c000
mmap2(0xb76dc000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1af000) = 0xb76dc000
mmap2(0xb76df000, 10780, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb76df000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7733000
set_thread_area({entry_number:-1, base_addr:0xb7733940, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0 (entry_number:6)
mprotect(0xb76dc000, 8192, PROT_READ)   = 0
mprotect(0x8049000, 4096, PROT_READ)    = 0
mprotect(0xb7734000, 4096, PROT_READ)   = 0
munmap(0xb76e2000, 170138)              = 0
exit_group(0)                           = ?
+++ exited with 0 +++
